# coding: utf-8

"""
    FIX Gateway Commander API

    # FIX Gateway Commander API REST API to get status and to send control commands to FIX Gateway.  Configuration API allows to view and update FIX Gateway session configuration.                         # noqa: E501

    OpenAPI spec version: 0.1
    Contact: dmtsyganov@devexperts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ConfigurationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def config_partitions_get(self, **kwargs):  # noqa: E501
        """Retrieve FIX Gateway configuration  # noqa: E501

        This API allows users to retrieve FIX Gateway partitions configuration. Partitions configuration is used by CLIENT FIX Gateway agents for outgoing (to Exchange) FIX connections. Partitions configuration may be stored in a property file or in a database. This API retrieves configuration from a database. Please note that following partition names are reserved and should be used in describing partition configuration: * C1 - cash (equity) partition one * C2 - cash (equity) partitoin two * D1 - derivatives partition one * D2 - derivatives partition two  Also, it is recommended that Reference Data partitions starts with \"RD\", For example: RD, RDC, RDD                                      # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_partitions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GateConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_partitions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.config_partitions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def config_partitions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve FIX Gateway configuration  # noqa: E501

        This API allows users to retrieve FIX Gateway partitions configuration. Partitions configuration is used by CLIENT FIX Gateway agents for outgoing (to Exchange) FIX connections. Partitions configuration may be stored in a property file or in a database. This API retrieves configuration from a database. Please note that following partition names are reserved and should be used in describing partition configuration: * C1 - cash (equity) partition one * C2 - cash (equity) partitoin two * D1 - derivatives partition one * D2 - derivatives partition two  Also, it is recommended that Reference Data partitions starts with \"RD\", For example: RD, RDC, RDD                                      # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_partitions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GateConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_partitions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/config/partitions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GateConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_partitions_post(self, **kwargs):  # noqa: E501
        """Update FIX Gateway configuration  # noqa: E501

        This API allows users to update FIX Gateway partitions configuration. Partitions configuration is used by CLIENT FIX Gateway agents for outgoing (to Exchange) FIX connections. This API updates configuration strored in a database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_partitions_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[GateConfigurationInner] body:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_partitions_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.config_partitions_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def config_partitions_post_with_http_info(self, **kwargs):  # noqa: E501
        """Update FIX Gateway configuration  # noqa: E501

        This API allows users to update FIX Gateway partitions configuration. Partitions configuration is used by CLIENT FIX Gateway agents for outgoing (to Exchange) FIX connections. This API updates configuration strored in a database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_partitions_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[GateConfigurationInner] body:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_partitions_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/config/partitions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
