# coding: utf-8

"""
    FIX Gateway Commander API

    # FIX Gateway Commander API REST API to get status and to send control commands to FIX Gateway.  Configuration API allows to view and update FIX Gateway session configuration.                         # noqa: E501

    OpenAPI spec version: 0.1
    Contact: dmtsyganov@devexperts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ShortsaleRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_type': 'str',
        'name': 'str',
        'initiator': 'str',
        'prohibit': 'bool'
    }

    attribute_map = {
        'agent_type': 'agentType',
        'name': 'name',
        'initiator': 'initiator',
        'prohibit': 'prohibit'
    }

    def __init__(self, agent_type=None, name=None, initiator=None, prohibit=None):  # noqa: E501
        """ShortsaleRequest - a model defined in Swagger"""  # noqa: E501
        self._agent_type = None
        self._name = None
        self._initiator = None
        self._prohibit = None
        self.discriminator = None
        if agent_type is not None:
            self.agent_type = agent_type
        if name is not None:
            self.name = name
        if initiator is not None:
            self.initiator = initiator
        if prohibit is not None:
            self.prohibit = prohibit

    @property
    def agent_type(self):
        """Gets the agent_type of this ShortsaleRequest.  # noqa: E501

        Agent type - SERVER  # noqa: E501

        :return: The agent_type of this ShortsaleRequest.  # noqa: E501
        :rtype: str
        """
        return self._agent_type

    @agent_type.setter
    def agent_type(self, agent_type):
        """Sets the agent_type of this ShortsaleRequest.

        Agent type - SERVER  # noqa: E501

        :param agent_type: The agent_type of this ShortsaleRequest.  # noqa: E501
        :type: str
        """

        self._agent_type = agent_type

    @property
    def name(self):
        """Gets the name of this ShortsaleRequest.  # noqa: E501

        Agent name  # noqa: E501

        :return: The name of this ShortsaleRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShortsaleRequest.

        Agent name  # noqa: E501

        :param name: The name of this ShortsaleRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def initiator(self):
        """Gets the initiator of this ShortsaleRequest.  # noqa: E501

        Initiator id - FIX session initiator(sender) id  # noqa: E501

        :return: The initiator of this ShortsaleRequest.  # noqa: E501
        :rtype: str
        """
        return self._initiator

    @initiator.setter
    def initiator(self, initiator):
        """Sets the initiator of this ShortsaleRequest.

        Initiator id - FIX session initiator(sender) id  # noqa: E501

        :param initiator: The initiator of this ShortsaleRequest.  # noqa: E501
        :type: str
        """

        self._initiator = initiator

    @property
    def prohibit(self):
        """Gets the prohibit of this ShortsaleRequest.  # noqa: E501

        Prohibit or allow short sale  # noqa: E501

        :return: The prohibit of this ShortsaleRequest.  # noqa: E501
        :rtype: bool
        """
        return self._prohibit

    @prohibit.setter
    def prohibit(self, prohibit):
        """Sets the prohibit of this ShortsaleRequest.

        Prohibit or allow short sale  # noqa: E501

        :param prohibit: The prohibit of this ShortsaleRequest.  # noqa: E501
        :type: bool
        """

        self._prohibit = prohibit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShortsaleRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShortsaleRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
